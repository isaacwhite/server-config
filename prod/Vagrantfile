# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.hostname = "GLaDOS-centos-test"
  config.vm.box = "digital_ocean"

	config.vm.provider :digital_ocean do |provider|
    provider.client_id = "vagrant"
    provider.api_key = ENV['DIGITAL_OCEAN_KEY']
    provider.image = "6.5 x64"
    provider.region = "nyc2"
    provider.token = ENV['DIGITAL_OCEAN_KEY']
    provider.size ="2gb"
  end

  config.ssh.private_key_path = "~/.ssh/id_rsa"
  # config.ssh.username = 'isaac'

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080
  # config.vm.network :forwarded_port, guest: 443, host: 8443
  # config.vm.network :forwarded_port, guest: 8888, host: 8888

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.10.15"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "~/localdev", "/var/www", :create => true, :nfs => true
  config.vm.synced_folder "../puppet", "/puppet", :create => true, :nfs => true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # View the documentation for the provider you're using for more
  # information on available options.
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = false

  #   vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  #   vb.customize ["modifyvm", :id, "--memory", "2048"]
  #   vb.customize ["modifyvm", :id, "--cpus", "2"]
  #   vb.customize ["modifyvm", :id, "--ioapic", "on"]
  # end

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file base.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # group { "puppet":
  #   ensure => "present",
  # }
  #
  # File { owner => 0, group => 0, mode => 0644 }
  #
  # file { '/etc/motd':
  #   content => "Welcome to your Vagrant-built virtual machine!
  #               Managed by Puppet.\n"
  # }
  #
  #
  # Install puppet before using puppet provisioning.
	config.vm.provision :shell, :path => 'install_puppet.sh'

  config.vm.provision :puppet, :options => "--verbose", :module_path => "modules" do |puppet|
    puppet.options = "--hiera_config /puppet/manifests/hiera.yaml"
    puppet.manifests_path = "../puppet/manifests"
    puppet.module_path = "../puppet/modules"
    puppet.manifest_file  = "init.pp"
  end

end
